using UnityEngine;
using System.Collections.Generic;
using Utils;

namespace Map
{
    /// <summary>
    /// Component in charge of adding shadow sprites to the GameObject owner depending on its position and altitude
    /// regarding the adjacent blocks in the map.  
    /// <seealso cref="MapTile"/>
    /// <seealso cref="MapManager"/>
    /// <seealso cref="MapGenerator"/>
    /// </summary>
    public class Block : MonoBehaviour
    {
        #region Serialize fields

        [SerializeField]private GameObject shadows;

        #endregion

        #region Properties

        public Vector2 MapPosition
        {
            get;
            set;
        }

        #endregion

        #region Public methods

        /// <summary>
        /// Method called by MapTile in charge of assign shadows by instanciating them over the GameObject owner.
        /// Using its position in an altitude matrix given by "mapShape" and generated by MapGenerator, this method
        /// checks every adjacent position and assigns shadows according the intructions given in the "PlanetCuteShadowTest" image.
        /// <seealso cref="MapTile"/>
        /// <seealso cref="MapManager"/>
        /// <seealso cref="MapGenerator"/>
        /// <seealso cref="Tuple{T1, T2}"/>
        /// </summary>
        /// <param name="mapShape">Matrix of Tuples with all the altitudes. It will only use the "First" field.</param>
        /// <param name="rows">Number of rows of the matrix/param>
        /// <param name="cols">Number of colums of the matrix.</param>
        /// <param name="row">Actual row position of the GameObject.</param>
        /// <param name="col">Actual column position of the GameObject.<</param>
        public void GenerateShadows(Tuple<int, BlockType>[][] mapShape, int rows, int cols, int row, int col)
        {
            int currentAltitude = mapShape[row][col].First;
            List<string> shadowNames = new List<string>();

            /// This monstrosity, which I don't feel very proud of, considerates every possibility for the shadow location according
            /// to the Block position in the "mapShape" matrix.
            /// For every possibility that matches with the requirements, it includes a string in "shadowNames" with the actual
            /// name of the shadow GameObject.
            /// At the end, and using the GameObjects folder provided, it will clone every shadow GameObject whose name has been stored
            /// in "shadowNames" over the current block.

            if (row == 0)
            {
                if (col == 0)
                {
                    if (mapShape[row + 1][col + 1].First - currentAltitude >= 1 && mapShape[row][col + 1].First - currentAltitude <= 0
                         && !IsRamp(mapShape[row + 1][col + 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-down-right");
                    }
                    if (mapShape[row + 1][col].First - currentAltitude >= 1 && !IsRamp(mapShape[row + 1][col],currentAltitude))
                    {
                        shadowNames.Add("shadow-down");
                    }
                    if (mapShape[row][col + 1].First - currentAltitude >= 1 && !IsRamp(mapShape[row + 1][col],currentAltitude))
                    {
                        shadowNames.Add("shadow-right");
                    }
                }
                else if (col == cols - 1)
                {
                    if (mapShape[row + 1][col].First - currentAltitude >= 1 && !IsRamp(mapShape[row + 1][col],currentAltitude))
                    {
                        shadowNames.Add("shadow-down");
                    }
                    if (mapShape[row + 1][col - 1].First - currentAltitude >= 1 && mapShape[row][col - 1].First - currentAltitude <= 0
                        && !IsRamp(mapShape[row + 1][col - 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-down-left");
                    }
                    if (mapShape[row][col - 1].First - currentAltitude >= 1 && !IsRamp(mapShape[row][col - 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-left");
                    }
                }
                else
                {
                    if (mapShape[row + 1][col + 1].First - currentAltitude >= 1 && mapShape[row][col + 1].First - currentAltitude <= 0
                        && !IsRamp(mapShape[row + 1][col + 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-down-right");
                    }
                    if (mapShape[row + 1][col].First - currentAltitude >= 1 && !IsRamp(mapShape[row + 1][col],currentAltitude))
                    {
                        shadowNames.Add("shadow-down");
                    }

                    if (mapShape[row + 1][col - 1].First - currentAltitude >= 1 && mapShape[row][col - 1].First - currentAltitude <= 0
                         && !IsRamp(mapShape[row + 1][col - 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-down-left");
                    }
                    if (mapShape[row][col + 1].First - currentAltitude >= 1 && !IsRamp(mapShape[row][col + 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-right");
                    }
                    if (mapShape[row][col - 1].First - currentAltitude >= 1 && !IsRamp(mapShape[row][col - 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-left");
                    }
                }
            }
            else if (row == rows - 1)
            {
                if (col == 0)
                {
                    if (mapShape[row][col + 1].First - currentAltitude >= 1 && !IsRamp(mapShape[row][col + 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-right");
                    }
                    if (mapShape[row - 1][col + 1].First - currentAltitude >= 1 &&
                    mapShape[row - 1][col].First - currentAltitude <= 0 &&
                    mapShape[row][col + 1].First - currentAltitude <= 0 && !IsRamp(mapShape[row - 1][col + 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-up-right");
                    }
                    if (mapShape[row - 1][col].First - currentAltitude >= 1)
                    {
                        shadowNames.Add("shadow-up");
                    }
                }
                else if (col == cols - 1)
                {
                    if (mapShape[row][col - 1].First - currentAltitude >= 1 && !IsRamp(mapShape[row][col - 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-left");
                    }
                    if (mapShape[row - 1][col - 1].First - currentAltitude >= 1 &&
                    mapShape[row - 1][col].First - currentAltitude <= 0 &&
                    mapShape[row][col - 1].First - currentAltitude <= 0 && !IsRamp(mapShape[row - 1][col - 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-up-left");
                    }
                    if (mapShape[row - 1][col].First - currentAltitude >= 1)
                    {
                        shadowNames.Add("shadow-up");
                    }
                }
                else
                {
                    if (mapShape[row][col - 1].First - currentAltitude >= 1 && !IsRamp(mapShape[row][col - 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-left");
                    }
                    if (mapShape[row - 1][col + 1].First - currentAltitude >= 1 &&
                        mapShape[row - 1][col].First - currentAltitude <= 0 &&
                        mapShape[row][col + 1].First - currentAltitude <= 0 && !IsRamp(mapShape[row - 1][col + 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-up-right");
                    }
                    if (mapShape[row - 1][col - 1].First - currentAltitude >= 1 &&
                    mapShape[row - 1][col].First - currentAltitude <= 0 &&
                    mapShape[row][col - 1].First - currentAltitude <= 0 && !IsRamp(mapShape[row - 1][col - 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-up-left");
                    }

                    if (mapShape[row - 1][col].First - currentAltitude >= 1)
                    {
                        shadowNames.Add("shadow-up");
                    }
                }
            }
            else
            {
                if (col == 0)
                {
                    if (mapShape[row + 1][col + 1].First - currentAltitude >= 1 
                        && mapShape[row][col + 1].First - currentAltitude <= 0
                        && !IsRamp(mapShape[row + 1][col + 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-down-right");
                    }
                    if (mapShape[row + 1][col].First - currentAltitude >= 1 && 
                        !IsRamp(mapShape[row + 1][col],currentAltitude))
                    {
                        shadowNames.Add("shadow-down");
                    }
                    if (mapShape[row][col + 1].First - currentAltitude >= 1 && !IsRamp(mapShape[row][col + 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-right");
                    }
                    if (mapShape[row - 1][col + 1].First - currentAltitude >= 1 &&
                     mapShape[row - 1][col].First - currentAltitude <= 0 &&
                     mapShape[row][col + 1].First - currentAltitude <= 0 && !IsRamp(mapShape[row - 1][col + 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-up-right");
                    }
                    if (mapShape[row - 1][col].First - currentAltitude >= 1)
                    {
                        shadowNames.Add("shadow-up");
                    }
                }
                else if (col == cols - 1)
                {
                    if (mapShape[row + 1][col].First - currentAltitude >= 1 && !IsRamp(mapShape[row + 1][col],currentAltitude))
                    {
                        shadowNames.Add("shadow-down");
                    }

                    if (mapShape[row + 1][col - 1].First - currentAltitude >= 1 && mapShape[row][col - 1].First - currentAltitude <= 0
                         && !IsRamp(mapShape[row + 1][col - 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-down-left");
                    }
                    if (mapShape[row][col - 1].First - currentAltitude >= 1 && !IsRamp(mapShape[row][col - 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-left");
                    }
                    if (mapShape[row - 1][col - 1].First - currentAltitude >= 1 &&
                    mapShape[row - 1][col].First - currentAltitude <= 0 &&
                    mapShape[row][col - 1].First - currentAltitude <= 0 && !IsRamp(mapShape[row - 1][col - 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-up-left");
                    }

                    if (mapShape[row - 1][col].First - currentAltitude >= 1)
                    {
                        shadowNames.Add("shadow-up");
                    }
                }
                else
                {
                    if (mapShape[row + 1][col + 1].First - currentAltitude >= 1 && mapShape[row][col + 1].First - currentAltitude <= 0
                        && !IsRamp(mapShape[row + 1][col + 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-down-right");
                    }
                    if (mapShape[row + 1][col].First - currentAltitude >= 1 && !IsRamp(mapShape[row + 1][col],currentAltitude))
                    {
                        shadowNames.Add("shadow-down");
                    }

                    if (mapShape[row + 1][col - 1].First - currentAltitude >= 1 && mapShape[row][col - 1].First - currentAltitude <= 0
                         && !IsRamp(mapShape[row + 1][col - 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-down-left");
                    }
                    if (mapShape[row][col + 1].First - currentAltitude >= 1 && !IsRamp(mapShape[row][col + 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-right");
                    }
                    if (mapShape[row][col - 1].First - currentAltitude >= 1 && !IsRamp(mapShape[row][col - 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-left");
                    }
                    if (mapShape[row - 1][col + 1].First - currentAltitude >= 1 &&
                        mapShape[row - 1][col].First - currentAltitude <= 0 &&
                        mapShape[row][col + 1].First - currentAltitude <= 0 && !IsRamp(mapShape[row - 1][col + 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-up-right");
                    }
                    if (mapShape[row - 1][col - 1].First - currentAltitude >= 1 &&
                    mapShape[row - 1][col].First - currentAltitude <= 0 &&
                    mapShape[row][col - 1].First - currentAltitude <= 0 && !IsRamp(mapShape[row - 1][col - 1],currentAltitude))
                    {
                        shadowNames.Add("shadow-up-left");
                    }

                    if (mapShape[row - 1][col].First - currentAltitude >= 1)
                    {
                        shadowNames.Add("shadow-up");
                    }
                }
            }
            
            foreach (string shadowName in shadowNames)
            {
                Transform shadowGen = shadows.transform.FindChild(shadowName);
                if (shadowGen != null )
                {
                    GameObject shadowClone = (GameObject)Instantiate(shadowGen.gameObject, transform.position - new Vector3(0, 0, 0.01f), transform.rotation);
                    shadowClone.transform.parent = transform;
                    shadowClone.name = shadowGen.name;
                    shadowClone.SetActive(true);
                }
            }
        }

        #endregion

        #region Private methods


        /// <summary>
        /// Method used for checking if the adjacent block being tested is a Ramp and is above the current block.
        /// This is necessary since ramps should not create the same shadows that regular blocks.
        /// </summary>
        /// <param name="otherAltitude">The adjacent block's altitude.</param>
        /// <param name="currentAltitude">The current block's altitude.</param>
        /// <returns>True if is a ramp above the current block.</returns>
        private bool IsRamp(Tuple<int,BlockType> otherAltitude, int currentAltitude)
        {
            return (otherAltitude.First - currentAltitude == 1 && 
                (otherAltitude.Second == BlockType.LeftRamp || otherAltitude.Second == BlockType.RightRamp));
        }

        #endregion

    }
}
